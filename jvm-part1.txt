public class NonEmptyMapDeserializer extends JsonDeserializer<Map<String, String>> {

    @Override
    public Map<String, String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {

        JsonNode node = p.getCodec().readTree(p);

        // 1. Explicitly reject any string input first. This is the key fix.
        if (node.isTextual()) {
            String text = node.asText();
            // A map cannot be created from any string, especially "null" or an empty one.
            throw JsonMappingException.from(p, "Cannot deserialize a Map from the string value \"" + text + "\"");
        }

        // 2. Check for the JSON 'null' literal.
        if (node.isNull()) {
            throw JsonMappingException.from(p, "Map must not be null.");
        }

        // 3. Ensure it's a non-empty JSON object.
        if (!node.isObject()) {
             throw JsonMappingException.from(p, "Input must be a JSON object to be deserialized into a Map.");
        }
        if (node.isEmpty()) {
            throw JsonMappingException.from(p, "Map must not be empty.");
        }

        // 4. If all checks pass, deserialize and then validate the contents.
        MapType mapType = ctxt.getTypeFactory().constructMapType(Map.class, String.class, String.class);
        Map<String, String> map = p.getCodec().readValue(p.getCodec().treeAsTokens(node), mapType);

        for (Map.Entry<String, String> entry : map.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();

            if (key == null || key.isEmpty() || value == null || value.isEmpty()) {
                throw JsonMappingException.from(p, "Map keys and values must not be null or empty.");
            }
        }

        return map;
    }
}
