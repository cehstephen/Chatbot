public class NonEmptyMapDeserializer extends JsonDeserializer<Map<String, String>> {

    @Override
    public Map<String, String> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {

        // 1. Read the JSON into an in-memory Node
        JsonNode node = p.getCodec().readTree(p);

        // 2. Perform initial structural validation on the node
        if (!node.isObject()) {
            throw JsonMappingException.from(p, "Input must be a JSON object.");
        }
        if (node.isEmpty()) {
            throw JsonMappingException.from(p, "Map must not be empty.");
        }

        // 3. Convert the Node to a Map.
        // This is the simplest and most reliable way to perform the conversion
        // without causing recursion or other side effects.
        MapType mapType = ctxt.getTypeFactory().constructMapType(Map.class, String.class, String.class);
        Map<String, String> map = p.getCodec().readValue(p.getCodec().treeAsTokens(node), mapType);

        // 4. Validate the contents of the newly created map
        for (Map.Entry<String, String> entry : map.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();

            if (key == null || key.isEmpty() || value == null || value.isEmpty()) {
                throw JsonMappingException.from(p, "Map keys and values must not be null or empty.");
            }
        }

        return map;
    }
}
